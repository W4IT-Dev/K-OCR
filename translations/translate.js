const supportedLanguages=["de","en","es","ru","zh"];let translations={};const userLanguage=navigator.language||navigator.userLanguage;let languageCode=userLanguage.split("-")[0];const loadLanguageFile=a=>new Promise((e,t)=>{let n=new XMLHttpRequest;n.open("GET",`/translations/${a}.json`,!0),n.onreadystatechange=()=>{if(4===n.readyState){if(200===n.status)try{translations=JSON.parse(n.responseText),e()}catch(a){t(`Error parsing language file: ${a}`)}else t(`Error loading language file: ${n.statusText}`)}},n.send()}),translate=a=>translations[a]||a,updateUIWithTranslations=()=>{Array.from(document.querySelectorAll("[data-translate]")).forEach(a=>{let e=a.getAttribute("data-translate");a.innerText=translate(e)})},isLanguageSupported=a=>supportedLanguages.includes(a),loadAndTranslate=a=>{isLanguageSupported(a)?loadLanguageFile(a).then(updateUIWithTranslations).catch(a=>console.error(a)):console.error(`Unsupported language: ${a}`)};loadAndTranslate(languageCode);